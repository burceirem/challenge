{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bikahraman\\\\Desktop\\\\challenge\\\\src\\\\Pages\\\\Movies\\\\Movies.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Content from '../../Components/Content/Content';\nimport Header from \"../../Components/Header/Header\";\nimport Footer from \"../../Components/Footer/Footer\";\nimport { Dropdown, Form, FormControl, Button, Navbar } from 'react-bootstrap';\nimport Searchbar from '../../Components/Searchbar';\nimport Dropdownbar from '../../Components/Dropdownbar';\nimport '../MoviesAndSeries.css';\n\nconst Movies = ({\n  moviesData\n}) => {\n  const [sort, setSort] = useState(\"\");\n  const [searchData, setSearchData] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const myCallback = (searchTerm, sort) => {\n    setSearchTerm(searchTerm);\n    setSort(sort);\n  };\n\n  const myCallback2 = sort => {\n    setSort(sort);\n    console.log(sort);\n  };\n\n  useEffect(() => {\n    let results = moviesData.filter(item => item.title.toLowerCase().includes(searchTerm));\n    setSearchData(results);\n  }, [searchTerm]);\n\n  const getSortedData = sortKey => {\n    if (sortKey === 'yearAsc') {\n      return moviesData.sort(sortYearAsc);\n    }\n\n    if (sortKey === 'yearDesc') {\n      return moviesData.sort(sortYearDesc);\n    }\n\n    if (sortKey === 'titleDesc') {\n      return moviesData.sort(sortTitleDesc);\n    }\n\n    if (sortKey === 'search') {\n      return searchData;\n    }\n\n    return moviesData.sort(sortTitleAsc);\n  };\n\n  const handleSelect = sortKey => {\n    setSort(sortKey);\n  };\n\n  const sortTitleAsc = (a, b) => {\n    const titleA = a.title.toUpperCase();\n    const titleB = b.title.toUpperCase();\n    let comparison = 0;\n\n    if (titleA > titleB) {\n      comparison = 1;\n    } else if (titleA < titleB) {\n      comparison = -1;\n    }\n\n    return comparison;\n  };\n\n  const sortTitleDesc = (a, b) => {\n    const titleA = a.title.toUpperCase();\n    const titleB = b.title.toUpperCase();\n    let comparison = 0;\n\n    if (titleA > titleB) {\n      comparison = -1;\n    } else if (titleA < titleB) {\n      comparison = 1;\n    }\n\n    return comparison;\n  };\n\n  const sortYearAsc = (a, b) => {\n    return a.releaseYear - b.releaseYear;\n  };\n\n  const sortYearDesc = (a, b) => {\n    return b.releaseYear - a.releaseYear;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(Navbar, {\n    className: \"navbar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Searchbar, {\n    callbackFromParent: myCallback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(Dropdownbar, {\n    callbackFromParent: myCallback2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"content-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, getSortedData(sort).map(v => React.createElement(Content, {\n    key: v.title,\n    title: v.title,\n    url: v.images.PosterArt.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }))), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }));\n};\n\nMovies.propTypes = {\n  moviesData: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    url: PropTypes.string\n  })).isRequired\n};\nexport default Movies;","map":{"version":3,"sources":["C:/Users/bikahraman/Desktop/challenge/src/Pages/Movies/Movies.jsx"],"names":["React","useState","useEffect","PropTypes","Content","Header","Footer","Dropdown","Form","FormControl","Button","Navbar","Searchbar","Dropdownbar","Movies","moviesData","sort","setSort","searchData","setSearchData","searchTerm","setSearchTerm","myCallback","myCallback2","console","log","results","filter","item","title","toLowerCase","includes","getSortedData","sortKey","sortYearAsc","sortYearDesc","sortTitleDesc","sortTitleAsc","handleSelect","a","b","titleA","toUpperCase","titleB","comparison","releaseYear","map","v","images","PosterArt","url","propTypes","arrayOf","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React ,{useState,useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Content from '../../Components/Content/Content';\r\nimport Header from \"../../Components/Header/Header\";\r\nimport Footer from \"../../Components/Footer/Footer\";\r\nimport { Dropdown ,Form ,FormControl,Button,Navbar} from 'react-bootstrap';\r\nimport Searchbar from '../../Components/Searchbar';\r\nimport Dropdownbar from '../../Components/Dropdownbar';\r\nimport '../MoviesAndSeries.css';\r\n\r\n\r\nconst Movies = ({moviesData}) => {\r\n\r\n  const [sort, setSort] = useState(\"\");\r\n  const [searchData, setSearchData] = useState(\"\");\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n\r\n const myCallback = (searchTerm , sort) => {\r\n  setSearchTerm(searchTerm);\r\n  setSort(sort);\r\n \r\n};\r\n  \r\nconst myCallback2 = ( sort) => {\r\n  setSort(sort);\r\n  console.log(sort);\r\n \r\n};\r\n  useEffect(() => {\r\n    let results= moviesData.filter(item =>\r\n     item.title.toLowerCase().includes(searchTerm)\r\n     );\r\n     setSearchData(results);\r\n   }, [searchTerm]);\r\n\r\n \r\n\r\n   const getSortedData = (sortKey) => { \r\n\r\n    if(sortKey === 'yearAsc') {\r\n       return moviesData.sort(sortYearAsc);\r\n    }\r\n    if(sortKey === 'yearDesc') {\r\n     return moviesData.sort(sortYearDesc);\r\n     }\r\n     if(sortKey === 'titleDesc'){\r\n       return moviesData.sort(sortTitleDesc);\r\n     }\r\n     if(sortKey ==='search'){\r\n       return searchData\r\n     }\r\n\r\n    return moviesData.sort(sortTitleAsc);\r\n   };\r\n\r\n   const handleSelect = (sortKey) => {\r\n     setSort(sortKey);\r\n\r\n   };\r\n\r\n   const sortTitleAsc = (a, b ) => {\r\n     const titleA = a.title.toUpperCase();\r\n     const titleB = b.title.toUpperCase();\r\n     let comparison = 0;\r\n\r\n     if (titleA > titleB) {\r\n       comparison = 1;\r\n     } else if (titleA < titleB) {\r\n       comparison = -1;\r\n     }\r\n     return comparison;\r\n   };\r\n\r\n   const sortTitleDesc = (a, b ) => {\r\n     const titleA = a.title.toUpperCase();\r\n     const titleB = b.title.toUpperCase();\r\n     let comparison = 0;\r\n\r\n     if (titleA > titleB) {\r\n       comparison = -1;\r\n     } else if (titleA < titleB) {\r\n       comparison = 1;\r\n     }\r\n     return comparison;\r\n   };\r\n   const sortYearAsc = (a,b) => {\r\n       return  a.releaseYear-b.releaseYear;\r\n    \r\n   };\r\n\r\n   const sortYearDesc = (a,b) => {\r\n     return  b.releaseYear-a.releaseYear;\r\n  \r\n };\r\n \r\n   \r\n\r\nreturn (\r\n  <div>\r\n       <Header/>\r\n       <Navbar  className=\"navbar\"> \r\n       <Searchbar  callbackFromParent={myCallback}/>\r\n      <Dropdownbar callbackFromParent={myCallback2}/> \r\n       \r\n      \r\n     \r\n      </Navbar>\r\n        <div   className=\"content-container\"> \r\n          {getSortedData(sort).map (  v =>  <Content key={v.title} title = {v.title} url ={v.images.PosterArt.url} /> )} \r\n        </div>\r\n        <Footer/>\r\n\r\n        </div>\r\n    \r\n);\r\n\r\n}\r\nMovies.propTypes = {\r\n  moviesData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      url: PropTypes.string\r\n    }),\r\n  ).isRequired,\r\n\r\n};\r\nexport default Movies;"]},"metadata":{},"sourceType":"module"}